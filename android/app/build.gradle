/* android/app/build.gradle */

apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"
apply plugin: "com.google.gms.google-services"

/* RN 플러그인 */
react { autolinkLibrariesWithApp() }

def enableProguardInReleaseBuilds = false
def jscFlavor = "io.github.react-native-community:jsc-android:2026004.+"

android {
    namespace "com.finguard"
    compileSdk 35

    defaultConfig {
        applicationId "com.finguard"
        minSdk 24
        targetSdk 35

        // ---- 버전: CI에서 -PVERSION_CODE / -PVERSION_NAME로 주입 가능 ----
        def vc = (project.findProperty("VERSION_CODE")
                ?: project.findProperty("versionCode") ?: "1") as String
        def vn = (project.findProperty("VERSION_NAME")
                ?: project.findProperty("versionName") ?: "1.0.0") as String
        versionCode vc.toInteger()
        versionName vn
    }

    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }

        // ---- 릴리즈 서명: 환경변수 기반 (CI/CD에서 주입) ----
        release {
            // ANDROID_KEYSTORE_PATH가 없으면 로컬의 release.keystore 사용
            def ksPath = System.getenv("ANDROID_KEYSTORE_PATH") ?: "release.keystore"
            storeFile file(ksPath)
            storePassword System.getenv("ANDROID_KEYSTORE_PASSWORD")
            keyAlias System.getenv("ANDROID_SIGNING_KEY_ALIAS")
            keyPassword System.getenv("ANDROID_SIGNING_KEY_PASSWORD")

            // PKCS12 사용 시: ANDROID_KEYSTORE_TYPE=pkcs12
            def ksType = System.getenv("ANDROID_KEYSTORE_TYPE")
            if (ksType != null && ksType.trim()) {
                storeType ksType
            }
        }
    }

    buildTypes {
        debug   { signingConfig signingConfigs.debug }

        release {
            // 릴리즈는 실제 릴리즈 키로 서명
            signingConfig signingConfigs.release

            minifyEnabled enableProguardInReleaseBuilds
            shrinkResources enableProguardInReleaseBuilds
            proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"),
                          "proguard-rules.pro"
        }
    }
}

dependencies {
    implementation "com.facebook.react:react-android"

    /* ───── Google Play-Services (위치) 한 버전으로 통일 ───── */
    implementation "com.google.android.gms:play-services-base:18.5.0"
    implementation "com.google.android.gms:play-services-tasks:18.0.2"
    implementation "com.google.android.gms:play-services-location:21.2.0"

    /* ───── Firebase ───── */
    implementation "com.google.firebase:firebase-messaging:23.4.0"

    if (hermesEnabled.toBoolean()) {
        implementation "com.facebook.react:hermes-android"
    } else {
        implementation jscFlavor
    }
}

/* ───── 모든 서브모듈에서도 같은 버전 강제 ───── */
subprojects {
    configurations.all {
        resolutionStrategy {
            force "com.google.android.gms:play-services-base:18.5.0"
            force "com.google.android.gms:play-services-tasks:18.0.2"
            force "com.google.android.gms:play-services-location:21.2.0"
        }
    }
}
