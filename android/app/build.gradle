plugins {
  id 'com.android.application'
  id 'org.jetbrains.kotlin.android'
  id 'com.facebook.react'
  id 'com.google.gms.google-services'
}

react {
  // RN autolink
  autolinkLibrariesWithApp()
}

android {
  namespace "com.finguard"

  // 신/구 DSL을 모두 명시해 오탐 방지
  compileSdk 35
  compileSdkVersion 35

  // 도구/NDK 버전은 루트 ext 참조
  buildToolsVersion rootProject.ext.buildToolsVersion
  ndkVersion rootProject.ext.ndkVersion

  defaultConfig {
    applicationId "com.finguard"
    minSdk 24
    targetSdk 35

    // 릴리스 파이프라인에서 -P로 주입될 수 있으므로 기본값만
    versionCode (project.findProperty("VERSION_CODE") ?: 1) as Integer
    versionName (project.findProperty("VERSION_NAME") ?: "1.0.0") as String
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_17
    targetCompatibility JavaVersion.VERSION_17
  }
  kotlinOptions {
    jvmTarget = "17"
  }

  buildTypes {
    debug { signingConfig signingConfigs.debug }
    release {
      minifyEnabled false
      shrinkResources false
      proguardFiles getDefaultProguardFile("proguard-android-optimize.txt"), "proguard-rules.pro"
    }
  }

  packaging {
    resources {
      // 필요 pickFirst만 남김
      pickFirsts += ["META-INF/*"]
    }
  }
}

dependencies {
  // RN BOM(프로젝트 RN 버전에 맞게 조정)
  implementation(platform("com.facebook.react:react-native-bom:0.75.4"))
  implementation "com.facebook.react:react-android"

  def hermesEnabled = (project.findProperty("hermesEnabled") ?: "true").toBoolean()
  if (hermesEnabled) {
    implementation "com.facebook.react:hermes-android"
  } else {
    implementation "io.github.react-native-community:jsc-android:250230.2.1"
  }

  implementation "com.google.android.gms:play-services-base:18.5.0"
  implementation "com.google.android.gms:play-services-location:21.2.0"
  implementation "com.google.firebase:firebase-messaging:23.4.0"
}

/** 오토링킹 입력 파일 생성 타이밍 보정 (CI/Windows 간헐 이슈 회피) */
def autolinkDir = file("$rootDir/build/generated/autolinking")
tasks.register("prepareAutolinkingDir") {
  doLast {
    if (!autolinkDir.exists()) autolinkDir.mkdirs()
  }
}

gradle.projectsEvaluated {
  def genJsonTask =
      tasks.findByName("generateAutolinkingJson") ?:
      tasks.findByName("generateAutolinking") ?:
      tasks.findByName("reactNativeConfig")

  def genNewArchTask = tasks.findByName("generateAutolinkingNewArchitectureFiles")

  if (genJsonTask) {
    genJsonTask.dependsOn("prepareAutolinkingDir")
  }
  if (genJsonTask && genNewArchTask) {
    genNewArchTask.mustRunAfter(genJsonTask)
    genNewArchTask.dependsOn(genJsonTask)
  }
}
